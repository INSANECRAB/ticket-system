generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  CUSTOMER
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  domain    String?  // 이메일 도메인(@ 뒤)
  users     User[]   // 1:N 관계
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  password   String?
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id])
  role       UserRole @default(CUSTOMER)
  tickets    Ticket[] @relation("UserTickets")
  ownedTickets Ticket[] @relation("TicketOwner")
  comments   Comment[]
  messages   Message[]
  filesUploaded File[] @relation("UserFilesUploaded")
  extraEmails String[] // 추가
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserRole {
  ADMIN
  AGENT
  CUSTOMER
}

model Ticket {
  id         String   @id @default(uuid())
  ticketNo   String   @unique
  title      String
  content    String
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id])
  userId     String
  user       User     @relation("UserTickets", fields: [userId], references: [id])
  ownerId    String?
  owner      User?    @relation("TicketOwner", fields: [ownerId], references: [id])
  ccEmails   String[]
  status     TicketStatus @default(NEW)
  comments   Comment[]
  messages   Message[]
  files      File[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum TicketStatus {
  NEW
  OPEN
  PENDING
  ON_HOLD
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Message {
  id        String   @id @default(uuid())
  content   String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model File {
  id           String   @id @default(uuid())
  filename     String
  url          String?
  ticket       Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId     String?
  uploadedBy   User?    @relation("UserFilesUploaded", fields: [uploadedById], references: [id])
  uploadedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model InviteEmailTemplate {
  id        Int      @id @default(autoincrement())
  type      String   // 예: 'invite'
  subject   String
  body      String   // HTML
  updatedAt DateTime @updatedAt
}

model Invite {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  role       Role
  invitedAt  DateTime @default(now())
  accepted   Boolean  @default(false)
  acceptedAt DateTime?
} 